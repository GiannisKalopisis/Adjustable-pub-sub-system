[2020-04-14 17:01:05,063] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:01:05,064] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:01:05,064] DEBUG [Controller id=0] Preferred replicas by broker Map(1 -> Map(test-part-1-rep-5-0 -> Vector(1, 0, 2, 3, 4))) (kafka.controller.KafkaController)
[2020-04-14 17:01:05,064] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:01:05,065] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:02:43,878] DEBUG [Controller id=0] Delete topics listener fired for topics test-part-1-rep-5 to be deleted (kafka.controller.KafkaController)
[2020-04-14 17:02:43,879] INFO [Controller id=0] Starting topic deletion for topics test-part-1-rep-5 (kafka.controller.KafkaController)
[2020-04-14 17:02:43,881] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-1-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:43,887] INFO [Topic Deletion Manager 0] Deletion of topic test-part-1-rep-5 (re)started (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:43,888] INFO [Topic Deletion Manager 0] Topic deletion callback for test-part-1-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:43,906] INFO [Topic Deletion Manager 0] Partition deletion callback for test-part-1-rep-5-0 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:43,907] INFO [RequestSendThread controllerId=0] Controller 0 connected to 195.134.67.93:9093 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:02:43,909] INFO [RequestSendThread controllerId=0] Controller 0 connected to 195.134.67.93:9090 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:02:43,908] INFO [RequestSendThread controllerId=0] Controller 0 connected to 195.134.67.93:9091 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:02:43,908] INFO [RequestSendThread controllerId=0] Controller 0 connected to 195.134.67.93:9092 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:02:43,908] INFO [RequestSendThread controllerId=0] Controller 0 connected to 195.134.67.93:9094 (id: 4 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:02:44,130] DEBUG The stop replica request (delete = false) sent to broker 2 is StopReplicaRequestInfo([Topic=test-part-1-rep-5,Partition=0,Replica=2],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:02:44,131] DEBUG The stop replica request (delete = false) sent to broker 4 is StopReplicaRequestInfo([Topic=test-part-1-rep-5,Partition=0,Replica=4],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:02:44,131] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=test-part-1-rep-5,Partition=0,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:02:44,132] DEBUG The stop replica request (delete = false) sent to broker 3 is StopReplicaRequestInfo([Topic=test-part-1-rep-5,Partition=0,Replica=3],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:02:44,133] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=test-part-1-rep-5,Partition=0,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:02:44,134] DEBUG [Topic Deletion Manager 0] Deletion started for replicas [Topic=test-part-1-rep-5,Partition=0,Replica=0],[Topic=test-part-1-rep-5,Partition=0,Replica=3],[Topic=test-part-1-rep-5,Partition=0,Replica=1],[Topic=test-part-1-rep-5,Partition=0,Replica=4],[Topic=test-part-1-rep-5,Partition=0,Replica=2] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:44,141] DEBUG The stop replica request (delete = true) sent to broker 2 is StopReplicaRequestInfo([Topic=test-part-1-rep-5,Partition=0,Replica=2],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:02:44,144] DEBUG The stop replica request (delete = true) sent to broker 4 is StopReplicaRequestInfo([Topic=test-part-1-rep-5,Partition=0,Replica=4],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:02:44,144] DEBUG The stop replica request (delete = true) sent to broker 1 is StopReplicaRequestInfo([Topic=test-part-1-rep-5,Partition=0,Replica=1],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:02:44,144] DEBUG The stop replica request (delete = true) sent to broker 3 is StopReplicaRequestInfo([Topic=test-part-1-rep-5,Partition=0,Replica=3],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:02:44,144] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=test-part-1-rep-5,Partition=0,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:02:46,545] INFO [Controller id=0] New topics: [Set(test-part-2-rep-5)], deleted topics: [Set()], new partition replica assignment [Map(test-part-2-rep-5-1 -> Vector(3, 1, 2, 4, 0), test-part-2-rep-5-0 -> Vector(2, 0, 1, 3, 4))] (kafka.controller.KafkaController)
[2020-04-14 17:02:46,545] INFO [Controller id=0] New partition creation callback for test-part-2-rep-5-1,test-part-2-rep-5-0 (kafka.controller.KafkaController)
[2020-04-14 17:02:47,607] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 3: request error = NONE, partition errors = Map(test-part-1-rep-5-0 -> NONE) (kafka.controller.KafkaController)
[2020-04-14 17:02:47,610] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test-part-1-rep-5,Partition=0,Replica=3] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:47,611] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-1-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:47,612] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 4: request error = NONE, partition errors = Map(test-part-1-rep-5-0 -> NONE) (kafka.controller.KafkaController)
[2020-04-14 17:02:47,612] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test-part-1-rep-5,Partition=0,Replica=4] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:47,613] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-1-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:47,613] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 1: request error = NONE, partition errors = Map(test-part-1-rep-5-0 -> NONE) (kafka.controller.KafkaController)
[2020-04-14 17:02:47,613] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test-part-1-rep-5,Partition=0,Replica=1] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:47,614] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-1-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:47,614] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(test-part-1-rep-5-0 -> NONE) (kafka.controller.KafkaController)
[2020-04-14 17:02:47,614] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test-part-1-rep-5,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:47,615] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-1-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:47,615] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 2: request error = NONE, partition errors = Map(test-part-1-rep-5-0 -> NONE) (kafka.controller.KafkaController)
[2020-04-14 17:02:47,615] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test-part-1-rep-5,Partition=0,Replica=2] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:47,616] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-1-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:48,581] INFO [Topic Deletion Manager 0] Deletion of topic test-part-1-rep-5 successfully completed (kafka.controller.TopicDeletionManager)
[2020-04-14 17:02:48,583] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-04-14 17:02:48,583] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-04-14 17:03:48,301] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-2-rep-5-1) (kafka.controller.KafkaController)
[2020-04-14 17:03:51,388] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-2-rep-5-0) (kafka.controller.KafkaController)
[2020-04-14 17:06:05,065] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:06:05,065] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:06:05,066] DEBUG [Controller id=0] Preferred replicas by broker Map(2 -> Map(test-part-2-rep-5-0 -> Vector(2, 0, 1, 3, 4)), 3 -> Map(test-part-2-rep-5-1 -> Vector(3, 1, 2, 4, 0))) (kafka.controller.KafkaController)
[2020-04-14 17:06:05,066] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:06:05,066] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:06:05,067] DEBUG [Controller id=0] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2020-04-14 17:06:05,067] TRACE [Controller id=0] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:09:59,833] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-2-rep-5-0) (kafka.controller.KafkaController)
[2020-04-14 17:11:05,067] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:11:05,067] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:11:05,068] DEBUG [Controller id=0] Preferred replicas by broker Map(2 -> Map(test-part-2-rep-5-0 -> Vector(2, 0, 1, 3, 4)), 3 -> Map(test-part-2-rep-5-1 -> Vector(3, 1, 2, 4, 0))) (kafka.controller.KafkaController)
[2020-04-14 17:11:05,068] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:11:05,068] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:11:05,068] DEBUG [Controller id=0] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2020-04-14 17:11:05,068] TRACE [Controller id=0] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:16:05,069] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:16:05,070] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:16:05,070] DEBUG [Controller id=0] Preferred replicas by broker Map(2 -> Map(test-part-2-rep-5-0 -> Vector(2, 0, 1, 3, 4)), 3 -> Map(test-part-2-rep-5-1 -> Vector(3, 1, 2, 4, 0))) (kafka.controller.KafkaController)
[2020-04-14 17:16:05,070] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:16:05,070] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:16:05,070] DEBUG [Controller id=0] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2020-04-14 17:16:05,071] TRACE [Controller id=0] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:16:12,810] DEBUG [Controller id=0] Delete topics listener fired for topics test-part-2-rep-5 to be deleted (kafka.controller.KafkaController)
[2020-04-14 17:16:12,811] INFO [Controller id=0] Starting topic deletion for topics test-part-2-rep-5 (kafka.controller.KafkaController)
[2020-04-14 17:16:12,811] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-2-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:12,812] INFO [Topic Deletion Manager 0] Deletion of topic test-part-2-rep-5 (re)started (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:12,812] INFO [Topic Deletion Manager 0] Topic deletion callback for test-part-2-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:12,816] INFO [Topic Deletion Manager 0] Partition deletion callback for test-part-2-rep-5-1,test-part-2-rep-5-0 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,131] DEBUG The stop replica request (delete = false) sent to broker 2 is StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=0,Replica=2],false),StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=1,Replica=2],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:16:13,131] DEBUG The stop replica request (delete = false) sent to broker 4 is StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=1,Replica=4],false),StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=0,Replica=4],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:16:13,131] DEBUG The stop replica request (delete = false) sent to broker 1 is StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=0,Replica=1],false),StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=1,Replica=1],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:16:13,132] DEBUG The stop replica request (delete = false) sent to broker 3 is StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=0,Replica=3],false),StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=1,Replica=3],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:16:13,132] DEBUG The stop replica request (delete = false) sent to broker 0 is StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=0,Replica=0],false),StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=1,Replica=0],false) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:16:13,132] DEBUG [Topic Deletion Manager 0] Deletion started for replicas [Topic=test-part-2-rep-5,Partition=0,Replica=2],[Topic=test-part-2-rep-5,Partition=0,Replica=3],[Topic=test-part-2-rep-5,Partition=1,Replica=3],[Topic=test-part-2-rep-5,Partition=1,Replica=4],[Topic=test-part-2-rep-5,Partition=0,Replica=4],[Topic=test-part-2-rep-5,Partition=1,Replica=2],[Topic=test-part-2-rep-5,Partition=0,Replica=0],[Topic=test-part-2-rep-5,Partition=1,Replica=0],[Topic=test-part-2-rep-5,Partition=0,Replica=1],[Topic=test-part-2-rep-5,Partition=1,Replica=1] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,139] DEBUG The stop replica request (delete = true) sent to broker 2 is StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=0,Replica=2],true),StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=1,Replica=2],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:16:13,140] DEBUG The stop replica request (delete = true) sent to broker 4 is StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=1,Replica=4],true),StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=0,Replica=4],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:16:13,140] DEBUG The stop replica request (delete = true) sent to broker 1 is StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=0,Replica=1],true),StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=1,Replica=1],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:16:13,140] DEBUG The stop replica request (delete = true) sent to broker 3 is StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=0,Replica=3],true),StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=1,Replica=3],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:16:13,141] DEBUG The stop replica request (delete = true) sent to broker 0 is StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=0,Replica=0],true),StopReplicaRequestInfo([Topic=test-part-2-rep-5,Partition=1,Replica=0],true) (kafka.controller.ControllerBrokerRequestBatch)
[2020-04-14 17:16:13,799] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 4: request error = NONE, partition errors = Map(test-part-2-rep-5-1 -> NONE, test-part-2-rep-5-0 -> NONE) (kafka.controller.KafkaController)
[2020-04-14 17:16:13,799] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test-part-2-rep-5,Partition=1,Replica=4],[Topic=test-part-2-rep-5,Partition=0,Replica=4] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,799] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-2-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,807] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 0: request error = NONE, partition errors = Map(test-part-2-rep-5-1 -> NONE, test-part-2-rep-5-0 -> NONE) (kafka.controller.KafkaController)
[2020-04-14 17:16:13,807] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test-part-2-rep-5,Partition=1,Replica=0],[Topic=test-part-2-rep-5,Partition=0,Replica=0] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,807] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-2-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,808] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 1: request error = NONE, partition errors = Map(test-part-2-rep-5-1 -> NONE, test-part-2-rep-5-0 -> NONE) (kafka.controller.KafkaController)
[2020-04-14 17:16:13,808] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test-part-2-rep-5,Partition=1,Replica=1],[Topic=test-part-2-rep-5,Partition=0,Replica=1] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,808] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-2-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,809] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 2: request error = NONE, partition errors = Map(test-part-2-rep-5-1 -> NONE, test-part-2-rep-5-0 -> NONE) (kafka.controller.KafkaController)
[2020-04-14 17:16:13,809] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test-part-2-rep-5,Partition=1,Replica=2],[Topic=test-part-2-rep-5,Partition=0,Replica=2] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,809] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-2-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,810] DEBUG [Controller id=0] Delete topic callback invoked on StopReplica response received from broker 3: request error = NONE, partition errors = Map(test-part-2-rep-5-1 -> NONE, test-part-2-rep-5-0 -> NONE) (kafka.controller.KafkaController)
[2020-04-14 17:16:13,810] DEBUG [Topic Deletion Manager 0] Deletion successfully completed for replicas [Topic=test-part-2-rep-5,Partition=1,Replica=3],[Topic=test-part-2-rep-5,Partition=0,Replica=3] (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,810] INFO [Topic Deletion Manager 0] Handling deletion for topics test-part-2-rep-5 (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,832] INFO [Topic Deletion Manager 0] Deletion of topic test-part-2-rep-5 successfully completed (kafka.controller.TopicDeletionManager)
[2020-04-14 17:16:13,833] INFO [Controller id=0] New topics: [Set()], deleted topics: [Set()], new partition replica assignment [Map()] (kafka.controller.KafkaController)
[2020-04-14 17:16:13,833] DEBUG [Controller id=0] Delete topics listener fired for topics  to be deleted (kafka.controller.KafkaController)
[2020-04-14 17:16:14,753] INFO [Controller id=0] New topics: [Set(test-part-5-rep-5)], deleted topics: [Set()], new partition replica assignment [Map(test-part-5-rep-5-2 -> Vector(1, 2, 3, 4, 0), test-part-5-rep-5-1 -> Vector(0, 1, 2, 3, 4), test-part-5-rep-5-0 -> Vector(4, 0, 1, 2, 3), test-part-5-rep-5-3 -> Vector(2, 3, 4, 0, 1), test-part-5-rep-5-4 -> Vector(3, 4, 0, 1, 2))] (kafka.controller.KafkaController)
[2020-04-14 17:16:14,753] INFO [Controller id=0] New partition creation callback for test-part-5-rep-5-2,test-part-5-rep-5-1,test-part-5-rep-5-0,test-part-5-rep-5-3,test-part-5-rep-5-4 (kafka.controller.KafkaController)
[2020-04-14 17:17:15,143] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-5-rep-5-3) (kafka.controller.KafkaController)
[2020-04-14 17:17:15,479] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-5-rep-5-2) (kafka.controller.KafkaController)
[2020-04-14 17:17:19,346] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-5-rep-5-4, test-part-5-rep-5-0, test-part-5-rep-5-1) (kafka.controller.KafkaController)
[2020-04-14 17:17:20,399] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-5-rep-5-0) (kafka.controller.KafkaController)
[2020-04-14 17:21:05,071] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:21:05,071] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:21:05,073] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(test-part-5-rep-5-1 -> Vector(0, 1, 2, 3, 4)), 1 -> Map(test-part-5-rep-5-2 -> Vector(1, 2, 3, 4, 0)), 2 -> Map(test-part-5-rep-5-3 -> Vector(2, 3, 4, 0, 1)), 3 -> Map(test-part-5-rep-5-4 -> Vector(3, 4, 0, 1, 2)), 4 -> Map(test-part-5-rep-5-0 -> Vector(4, 0, 1, 2, 3))) (kafka.controller.KafkaController)
[2020-04-14 17:21:05,073] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-14 17:21:05,073] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:21:05,073] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:21:05,073] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:21:05,073] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:21:05,074] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:21:05,074] DEBUG [Controller id=0] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2020-04-14 17:21:05,074] TRACE [Controller id=0] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:21:05,074] DEBUG [Controller id=0] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2020-04-14 17:21:05,074] TRACE [Controller id=0] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:26:05,074] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:26:05,074] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:26:05,075] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(test-part-5-rep-5-1 -> Vector(0, 1, 2, 3, 4)), 1 -> Map(test-part-5-rep-5-2 -> Vector(1, 2, 3, 4, 0)), 2 -> Map(test-part-5-rep-5-3 -> Vector(2, 3, 4, 0, 1)), 3 -> Map(test-part-5-rep-5-4 -> Vector(3, 4, 0, 1, 2)), 4 -> Map(test-part-5-rep-5-0 -> Vector(4, 0, 1, 2, 3))) (kafka.controller.KafkaController)
[2020-04-14 17:26:05,076] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-14 17:26:05,076] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:26:05,076] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:26:05,076] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:26:05,076] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:26:05,076] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:26:05,076] DEBUG [Controller id=0] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2020-04-14 17:26:05,076] TRACE [Controller id=0] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:26:05,076] DEBUG [Controller id=0] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2020-04-14 17:26:05,076] TRACE [Controller id=0] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:31:05,077] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:31:05,077] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(test-part-5-rep-5-1 -> Vector(0, 1, 2, 3, 4)), 1 -> Map(test-part-5-rep-5-2 -> Vector(1, 2, 3, 4, 0)), 2 -> Map(test-part-5-rep-5-3 -> Vector(2, 3, 4, 0, 1)), 3 -> Map(test-part-5-rep-5-4 -> Vector(3, 4, 0, 1, 2)), 4 -> Map(test-part-5-rep-5-0 -> Vector(4, 0, 1, 2, 3))) (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] DEBUG [Controller id=0] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] TRACE [Controller id=0] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] DEBUG [Controller id=0] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2020-04-14 17:31:05,079] TRACE [Controller id=0] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:36:05,080] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:36:05,081] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(test-part-5-rep-5-1 -> Vector(0, 1, 2, 3, 4)), 1 -> Map(test-part-5-rep-5-2 -> Vector(1, 2, 3, 4, 0)), 2 -> Map(test-part-5-rep-5-3 -> Vector(2, 3, 4, 0, 1)), 3 -> Map(test-part-5-rep-5-4 -> Vector(3, 4, 0, 1, 2)), 4 -> Map(test-part-5-rep-5-0 -> Vector(4, 0, 1, 2, 3))) (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] DEBUG [Controller id=0] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] TRACE [Controller id=0] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] DEBUG [Controller id=0] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2020-04-14 17:36:05,082] TRACE [Controller id=0] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:39:18,214] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-5-rep-5-3) (kafka.controller.KafkaController)
[2020-04-14 17:39:18,217] INFO [RequestSendThread controllerId=0] Controller 0 connected to 195.134.67.93:9091 (id: 1 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:39:18,218] INFO [RequestSendThread controllerId=0] Controller 0 connected to 195.134.67.93:9090 (id: 0 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:39:18,217] INFO [RequestSendThread controllerId=0] Controller 0 connected to 195.134.67.93:9092 (id: 2 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:39:18,218] INFO [RequestSendThread controllerId=0] Controller 0 connected to 195.134.67.93:9093 (id: 3 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:39:18,218] INFO [RequestSendThread controllerId=0] Controller 0 connected to 195.134.67.93:9094 (id: 4 rack: null) for sending state change requests (kafka.controller.RequestSendThread)
[2020-04-14 17:40:19,991] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-5-rep-5-1) (kafka.controller.KafkaController)
[2020-04-14 17:40:28,705] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-5-rep-5-4) (kafka.controller.KafkaController)
[2020-04-14 17:40:36,322] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-5-rep-5-4) (kafka.controller.KafkaController)
[2020-04-14 17:40:52,951] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-5-rep-5-2) (kafka.controller.KafkaController)
[2020-04-14 17:40:54,095] DEBUG [Controller id=0] Sending MetadataRequest to Brokers: Vector(0, 1, 2, 3, 4) for TopicPartitions: ArrayBuffer(test-part-5-rep-5-0) (kafka.controller.KafkaController)
[2020-04-14 17:41:05,082] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:41:05,083] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(test-part-5-rep-5-1 -> Vector(0, 1, 2, 3, 4)), 1 -> Map(test-part-5-rep-5-2 -> Vector(1, 2, 3, 4, 0)), 2 -> Map(test-part-5-rep-5-3 -> Vector(2, 3, 4, 0, 1)), 3 -> Map(test-part-5-rep-5-4 -> Vector(3, 4, 0, 1, 2)), 4 -> Map(test-part-5-rep-5-0 -> Vector(4, 0, 1, 2, 3))) (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] DEBUG [Controller id=0] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] TRACE [Controller id=0] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] DEBUG [Controller id=0] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2020-04-14 17:41:05,084] TRACE [Controller id=0] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:46:05,085] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:46:05,085] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:46:05,087] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(test-part-5-rep-5-1 -> Vector(0, 1, 2, 3, 4)), 1 -> Map(test-part-5-rep-5-2 -> Vector(1, 2, 3, 4, 0)), 2 -> Map(test-part-5-rep-5-3 -> Vector(2, 3, 4, 0, 1)), 3 -> Map(test-part-5-rep-5-4 -> Vector(3, 4, 0, 1, 2)), 4 -> Map(test-part-5-rep-5-0 -> Vector(4, 0, 1, 2, 3))) (kafka.controller.KafkaController)
[2020-04-14 17:46:05,087] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-14 17:46:05,087] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:46:05,087] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:46:05,087] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:46:05,087] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:46:05,087] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:46:05,087] DEBUG [Controller id=0] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2020-04-14 17:46:05,088] TRACE [Controller id=0] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:46:05,088] DEBUG [Controller id=0] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2020-04-14 17:46:05,088] TRACE [Controller id=0] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:51:05,089] INFO [Controller id=0] Processing automatic preferred replica leader election (kafka.controller.KafkaController)
[2020-04-14 17:51:05,089] TRACE [Controller id=0] Checking need to trigger auto leader balancing (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] DEBUG [Controller id=0] Preferred replicas by broker Map(0 -> Map(test-part-5-rep-5-1 -> Vector(0, 1, 2, 3, 4)), 1 -> Map(test-part-5-rep-5-2 -> Vector(1, 2, 3, 4, 0)), 2 -> Map(test-part-5-rep-5-3 -> Vector(2, 3, 4, 0, 1)), 3 -> Map(test-part-5-rep-5-4 -> Vector(3, 4, 0, 1, 2)), 4 -> Map(test-part-5-rep-5-0 -> Vector(4, 0, 1, 2, 3))) (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] DEBUG [Controller id=0] Topics not in preferred replica for broker 0 Map() (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] TRACE [Controller id=0] Leader imbalance ratio for broker 0 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] DEBUG [Controller id=0] Topics not in preferred replica for broker 1 Map() (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] TRACE [Controller id=0] Leader imbalance ratio for broker 1 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] DEBUG [Controller id=0] Topics not in preferred replica for broker 2 Map() (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] TRACE [Controller id=0] Leader imbalance ratio for broker 2 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] DEBUG [Controller id=0] Topics not in preferred replica for broker 3 Map() (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] TRACE [Controller id=0] Leader imbalance ratio for broker 3 is 0.0 (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] DEBUG [Controller id=0] Topics not in preferred replica for broker 4 Map() (kafka.controller.KafkaController)
[2020-04-14 17:51:05,090] TRACE [Controller id=0] Leader imbalance ratio for broker 4 is 0.0 (kafka.controller.KafkaController)
